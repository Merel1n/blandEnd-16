{"mappings":"AAAO,MAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCA5B,IAkBIE,EAAS,CAACC,EAAO,MAC1B,IAAIC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAClD,KAAOA,KACLC,GCvBF,mEDuBwC,GAAdC,EAAMF,IAEhC,OAAOC,CAAE,EEzBJ,SAASK,EAAWC,GACzB,MAAMC,EAAO,CAAEP,GAAIF,KAInB,OAHA,IAAIU,SAASF,EAAEG,eAAeC,SAAQ,CAACC,EAAOC,KAC5CL,EAAKK,GAAOD,CAAK,IAEZJ,C,CCEF,MAAMM,EAAkB,C,IAR/B,SAAaN,GACX,MAAMO,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,GAC3DJ,EAAQK,KAAKZ,GACbU,aAAaG,QAAQ,MAAOL,KAAKM,UAAUP,G,SAE7C,WACE,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,E,GCN7C,SAASI,EAAiBf,GAC/B,MAAO,6EACsCA,EAAKP,+BAC7CO,EAAKgB,sBACNhB,EAAKiB,sB,ECDJ,WACL,MACMC,EADmBZ,EAAgBa,SACTC,IAAIL,GAAkBM,KAAK,IAC3DnC,EAAKI,SAASgC,mBAAmB,YAAaJ,E,CCchD,GACAhC,EAAKC,KAAKoC,iBAAiB,UChBpB,SAAoBxB,GACzBA,EAAEyB,iBACF,MAAMxB,EAAOF,EAAWC,GACxBO,EAAgBmB,IAAIzB,GAEpB,MAAMkB,EAASH,EAAiBf,GAEhCd,EAAKI,SAASgC,mBAAmB,YAAaJ,GAC9CnB,EAAEG,cAAcwB,O,IDSlBxC,EAAKI,SAASiC,iBAAiB,SEtBxB,SAAoBxB,GACvBA,EAAE4B,M","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js","src/js/createData.js","src/js/localstorageApi.js","src/js/createMarkupCard.js","src/js/renderCards.js","src/index.js","src/js/formSubmit.js","src/js/deleteCard.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  listElem: document.querySelector('#task-list'),\n};\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\nexport function createData(e) {\n  const data = { id: nanoid() };\n  new FormData(e.currentTarget).forEach((value, key) => {\n    data[key] = value;\n  });\n  return data;\n}\n","function add(data) {\n  const dataArr = JSON.parse(localStorage.getItem('key')) || [];\n  dataArr.push(data);\n  localStorage.setItem('key', JSON.stringify(dataArr));\n}\nfunction getAll() {\n  return JSON.parse(localStorage.getItem('key')) || [];\n}\nexport const localStorageApi = { add, getAll };\n","export function createMarkupCard(data) {\n  return `<li class=\"task-list-item\">\n <button class=\"task-list-item-btn\" data-id=\"${data.id}\">Видалити</button>\n <h3>${data.taskName}</h3>\n <p>${data.taskText}</p>\n </li>`;\n}\n","import { localStorageApi } from './localstorageApi';\nimport { createMarkupCard } from './createMarkupCard';\nimport { refs } from './refs';\nexport function renderCards() {\n  const localStorageDate = localStorageApi.getAll();\n  const markup = localStorageDate.map(createMarkupCard).join('');\n  refs.listElem.insertAdjacentHTML('beforeend', markup);\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport { refs } from './js/refs';\nimport { formSubmit } from './js/formSubmit';\nimport { renderCards } from './js/renderCards';\nimport { deleteCard } from './js/deleteCard';\nrenderCards();\nrefs.form.addEventListener('submit', formSubmit);\nrefs.listElem.addEventListener('click', deleteCard);\n","import { createData } from './createData';\nimport { localStorageApi } from './localstorageApi';\nimport { refs } from './refs';\nimport { createMarkupCard } from './createMarkupCard';\n\nexport function formSubmit(e) {\n  e.preventDefault();\n  const data = createData(e);\n  localStorageApi.add(data);\n\n  const markup = createMarkupCard(data);\n\n  refs.listElem.insertAdjacentHTML('beforeend', markup);\n  e.currentTarget.reset();\n}\n","export function deleteCard(e) {\n    e.target\n}"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","listElem","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","id","bytes","crypto","getRandomValues","Uint8Array","$e4f73d03f190f807$export$773d79863eecfeab","e","data","FormData","currentTarget","forEach","value","key","$bf315dbfbb4d1dcc$export$1d9a30f00e78c7c3","dataArr","JSON","parse","localStorage","getItem","push","setItem","stringify","$77c4f477db9ee20f$export$98f2023ceafec56e","taskName","taskText","markup","getAll","map","join","insertAdjacentHTML","addEventListener","preventDefault","add","reset","target"],"version":3,"file":"index.99edf407.js.map"}